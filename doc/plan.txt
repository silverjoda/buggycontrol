# TEP traj opt
# Refactor and debug train_full_traj_tep. Parallelize traj_evaluation
# Train n_step gradient estimation
# Add spline representation for TEP
# Make new trajectory generation (using shortest path algo) for buggy based on racing and obstacle avoidance (for experiments and evaluation)
# No-regret proof for n-step gradient training?
# Try RNN and transformer as TEP
# Analyze possibilities of learning a trajectory delta regressor for faster trajectories (do we need to train by gradient? or can we do otherwise)

# Monday:
====== Buggy project =======
    - TODO: go over each component of traj tep optimizer (including sar xy conv) and check correctness
    - TODO: Make correct sar <-> xy conversion and test.
    - TODO: Check that the traj_tep_opimizer full test is working correctly and that the correct trajectories are being evaluated on.

    - TODO: Default shortest path traj needs to be strictly outside the boundary pts of barriers (or barrier boundaries have to be shrunk)
    - TODO: Need to add barriers to plot (buggy_maize_env_mujoco plot_grid_traj3)! Correct barrier positions and add optional distance to corner function!

    - TODO: Check that the evaluate_traj_opt_vs_mppi_full full test is working correctly and that the correct trajectories are being evaluated on.

    - TODO: For TEP Add failure prediction maybe (or maybe just ignore failed episodes).
    - TODO: Make full opt_vs_mmpi traj plot on grid


# Robotic transformations and frames:
Motivation: Spot example in rviz (coordinate frames form a tree, show tf tree, switch between various fixed frames: world, base_link, sensor, etc)
Defining a frame of reference. What does having a frame of reference mean (point is a linear combination of basis vectors).
Rigid body transformations (rot+trans), transforming from A to B (ref to 3b1b)
Rotation representations and conversions (euler, angle axis, quat, matrix)
Extracting individual rotation axis from transformations
Rotation example: IMU inclination from gravitational vector
Homogeneous transformations (4D)
Sensor example: Transform depth cloud from sensor to world frame
Defining a rotation frame: Manually, Using a rotation calculator, using optimization
ROS TF tree

# Spot hand:
- Try the ericvoll topics to see if hand works
- See how the high level features are represented in the API.

# Recipes:
Training buggy model on real data:
    - Find bagfiles
    - Launch statictfs.launch
    - Playback bagfile and launch buggy_model_learning_dataset_creator.py
    - Repeat for all bagfiles
    - run train_buggy_model.py with appropriate configuration

Training buggy model on mujoco data:
    - Use mujoco_dataset = train_buggy_model.ModelDataset(use_real_data=False) to make mujoco dataset
    - Use train_buggy_model.train(mujoco_dataset)

TEP training:
    - Make random trajectory dataset for TEP using traj_tep_optimizer.make_dataset() function
    - Train TEP using traj_tep_optimizer.train_tep()
    - Do 1-step gradient training using traj_tep_optimizer.train_tep_1step_grad_aggregated()

TEP testing:
    - Test TEP using traj_tep_optimizer.test_tep() function which loads and tests tep

TEP inference:
    - Load TEP
    - Use traj_tep_optimizer.optimize_env_traj(env, tep) to optimize the environment trajectory after reset

General testing procedure:
    - Train buggy model on mujoco or real data.
    - Train agent on random trajectory buggy env using train_buggy_a2c.py script (add correct env in config)
    - Train agent on maize trajectory buggy env with traj and free rewards (for later final comparison)
    - Pre-train TEP on random trajectory buggy dataset or using trajectories from maize
    - Do one-step TEP gradient training on random trajectory buggy dataset or using trajectories from maize
    - Launch full testing script to evaluate agent, agent with TEP correction, agent trained on maize with traj and free rew, MPPI with traj and free rew







