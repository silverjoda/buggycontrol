# TEP traj opt
# Refactor and debug train_full_traj_tep. Parallelize traj_evaluation
# Train n_step gradient estimation
# Add spline representation for TEP
# Make new trajectory generation (using shortest path algo) for buggy based on racing and obstacle avoidance (for experiments and evaluation)
# No-regret proof for n-step gradient training?
# Try RNN and transformer as TEP
# Analyze possibilities of learning a trajectory delta regressor for faster trajectories (do we need to train by gradient? or can we do otherwise)

# Buggy agent training:
-

# MPPI
- Finish implementing mppi

# Buggy env:
- Separate env which launches buggy with random or selected maize world and shortest path traj. Implement fast cost calculation for given traj for mppi.

# Mission: Model learning and transfer
- TODO: make new buggy maize env
- TODO: cont here, debug lte engine: Train buggy on learned mujoco model and test on mujoco.
- TODO: Test mppi
- Make better trajectory generation for gataset gathering for model training
- Does training model using a dagger like method work (if default training fails).
- Make proper trajectory testing script with qualitative and quantitative metrics for comparing learned model with mujoco env (with visualization).
- Try dataset augmentation by using bilateral symmetry (Does the slow turning and forward velocity go away)
- Try balanced training to represent state with lower velocity more(somehow)
- Implement meta learning for model learning (for example using a proxy neural network with attached layers for gradient prop)
- Train RMA-style
- Compare RMA-style with trained model transfer
- Try RL with difficult initial state distribution predictor to help with difficult environments

# Friday:
- Continue with Buggy project:
    - Test real buggy model on mujoco <-
    - Make training procedure for mujoco/real data discriminator
    - Make training which fuses mujoco and real data using learned discriminator or LSH.
    - Write new maize env.
        - Generation of maize. Barriers are objects (can be queried). Render barriers into image, plot etc. Maize can be rendered as grid for sp algo.
        - Shortest path generation
        - Mujoco visualization of barriers
        - Reward calculation

# Make tradr plan (path follower + reactive control)
- Load Tradr robot in simulation. Just staging area with a few cubes is enough
- On Basestation (BS) test path follower in isolation
- On BS test extended virtual bumper (reactive control) using joystick

# Robotic transformations and frames:
Motivation: Spot example in rviz (coordinate frames form a tree, show tf tree, switch between various fixed frames: world, base_link, sensor, etc)
Defining a frame of reference. What does having a frame of reference mean (point is a linear combination of basis vectors).
Rigid body transformations (rot+trans), transforming from A to B (ref to 3b1b)
Rotation representations and conversions (euler, angle axis, quat, matrix)
Extracting individual rotation axis from transformations
Rotation example: IMU inclination from gravitational vector
Homogeneous transformations (4D)
Sensor example: Transform depth cloud from sensor to world frame
Defining a rotation frame: Manually, Using a rotation calculator, using optimization
ROS TF tree

# Spot hand:
- Try the ericvoll topics to see if hand works
- See how the high level features are represented in the API.

# Recipes:
Training buggy model on real data:
    - Find bagfiles
    - Launch statictfs.launch
    - Playback bagfile and launch buggy_model_learning_dataset_creator.py
    - Repeat for all bagfiles
    - run train_buggy_model.py with appropriate configuration





