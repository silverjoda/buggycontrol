Plan:
- Make pose republisher to buggy aligned frame
- Make pose republisher from twist velocities (integrator)
- Make twist republisher from poses
- Make numpy dataset of poses/vels from bagfile
- Make transition model trainer
- Make rviz visualization for trained engine (with joystick).
- Analyze trained model when controlling with JS
- Compare trained model to dataset (visually in rviz)
- Use various dataset techniques to improve training of correlated data

- Learn to imitate random sequences with max noise frequency component of 10hz (90th percentile) in Mujoco
    . Dont forget rear wheel and steering state observers
    . Experiment with regularly sampled and distance sampled waypoints
    . Experiment with various NN architectures for imitation
- See if feature processor (at least of given trajectory) from imitator can be used for RL,
compare RL performance with imitation. Is imitated agent (self supervised viable for this job).
- Learn NN odometry from data (predict lin. acc and ang. vel)
    . See if various data balancing techniques help with learning
- Fit mujoco simulation to data
- Make visual comparison of fitted Mujoco and learned data engine and ground truth
- Compare policies learned on mujoco and learned engine on real platform
- Can we use learned model to optimize a trajectory (with geometrical constraints) slightly for faster time?
    . First try in simulation
    . If works in simulation, obtain a hokuyo and try on real platform

