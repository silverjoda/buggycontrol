# TEP traj opt
# Refactor and debug train_full_traj_tep. Parallelize traj_evaluation
# Train n_step gradient estimation
# Add spline representation for TEP
# Make new trajectory generation (using shortest path algo) for buggy based on racing and obstacle avoidance (for experiments and evaluation)
# No-regret proof for n-step gradient training?
# Try RNN and transformer as TEP
# Analyze possibilities of learning a trajectory delta regressor for faster trajectories (do we need to train by gradient? or can we do otherwise)

# Monday:
- Continue with Buggy project:
    - Test mppi
    - Write evaluation script for learned model on mujoco and real data (on withheld trajectories)
    - Debug and test buggy mujoco/model fusion training using discriminator
    - Do RMA-style training

# Robotic transformations and frames:
Motivation: Spot example in rviz (coordinate frames form a tree, show tf tree, switch between various fixed frames: world, base_link, sensor, etc)
Defining a frame of reference. What does having a frame of reference mean (point is a linear combination of basis vectors).
Rigid body transformations (rot+trans), transforming from A to B (ref to 3b1b)
Rotation representations and conversions (euler, angle axis, quat, matrix)
Extracting individual rotation axis from transformations
Rotation example: IMU inclination from gravitational vector
Homogeneous transformations (4D)
Sensor example: Transform depth cloud from sensor to world frame
Defining a rotation frame: Manually, Using a rotation calculator, using optimization
ROS TF tree

# Spot hand:
- Try the ericvoll topics to see if hand works
- See how the high level features are represented in the API.

# Recipes:
Training buggy model on real data:
    - Find bagfiles
    - Launch statictfs.launch
    - Playback bagfile and launch buggy_model_learning_dataset_creator.py
    - Repeat for all bagfiles
    - run train_buggy_model.py with appropriate configuration





